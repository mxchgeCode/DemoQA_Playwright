"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Browser Windows - Nested Frames.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–∞–º–∏:
- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ñ—Ä–µ–π–º–æ–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —Ñ—Ä–µ–π–º–æ–≤
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
"""

import pytest
import allure
from pages.alerts.browser_windows_page import BrowserWindowsPage


@allure.epic("Alerts, Frame & Windows")
@allure.feature("Nested Frames")
@allure.story("Parent Frame Access")
@pytest.mark.alerts
@pytest.mark.smoke
def test_access_parent_frame(browser_windows_page: BrowserWindowsPage):
    """
    –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —Ñ—Ä–µ–π–º—É.

    –®–∞–≥–∏:
    1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
    2. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    """
    with allure.step("–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Nested Frames"):
        browser_windows_page.log_step("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤")

    with allure.step("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º"):
        browser_windows_page.log_step("–ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π iframe")
        parent_text = browser_windows_page.get_parent_frame_text()
        browser_windows_page.log_step(
            f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞: {parent_text}"
        )

        allure.attach(parent_text, "parent_frame_content", allure.attachment_type.TEXT)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞"):
        expected_text = "Parent frame"
        assert (
            expected_text in parent_text
        ), f"–û–∂–∏–¥–∞–µ—Ç—Å—è '{expected_text}' –≤ —Ç–µ–∫—Å—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞, –ø–æ–ª—É—á–µ–Ω–æ '{parent_text}'"

        browser_windows_page.log_step(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@allure.epic("Alerts, Frame & Windows")
@allure.feature("Nested Frames")
@allure.story("Child Frame Access")
@pytest.mark.alerts
@pytest.mark.smoke
def test_access_child_frame(browser_windows_page: BrowserWindowsPage):
    """
    –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ—á–µ—Ä–Ω–µ–º—É —Ñ—Ä–µ–π–º—É –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é: –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º -> –¥–æ—á–µ—Ä–Ω–∏–π —Ñ—Ä–µ–π–º.
    """
    with allure.step("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º"):
        browser_windows_page.log_step(
            "–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º"
        )
        browser_windows_page.switch_to_parent_frame()

    with allure.step("–ò–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏–π"):
        browser_windows_page.log_step("–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –¥–æ—á–µ—Ä–Ω–∏–π —Ñ—Ä–µ–π–º")
        child_text = browser_windows_page.get_child_frame_text()
        browser_windows_page.log_step(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞: {child_text}")

        allure.attach(child_text, "child_frame_content", allure.attachment_type.TEXT)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞"):
        expected_text = "Child Iframe"
        assert (
            expected_text in child_text
        ), f"–û–∂–∏–¥–∞–µ—Ç—Å—è '{expected_text}' –≤ –¥–æ—á–µ—Ä–Ω–µ–º —Ñ—Ä–µ–π–º–µ, –ø–æ–ª—É—á–µ–Ω–æ '{child_text}'"

        browser_windows_page.log_step(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


@allure.epic("Alerts, Frame & Windows")
@allure.feature("Nested Frames")
@allure.story("Frame Hierarchy Navigation")
@pytest.mark.alerts
@pytest.mark.regression
def test_nested_frames_navigation_hierarchy(browser_windows_page: BrowserWindowsPage):
    """
    –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–æ–≤.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã: –æ—Å–Ω–æ–≤–Ω–∞—è -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π -> –¥–æ—á–µ—Ä–Ω–∏–π -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π -> –æ—Å–Ω–æ–≤–Ω–∞—è.
    """
    navigation_log = []

    with allure.step("–ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"):
        browser_windows_page.log_step("üè† –ò—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        main_visible = browser_windows_page.is_main_content_visible()
        navigation_log.append(f"Main content visible: {main_visible}")

        assert main_visible, "–î–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"

    with allure.step("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º"):
        browser_windows_page.log_step("üìÑ –ü–µ—Ä–µ—Ö–æ–¥: –æ—Å–Ω–æ–≤–Ω–æ–π -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º")
        browser_windows_page.switch_to_parent_frame()

        parent_text = browser_windows_page.get_current_frame_content()
        navigation_log.append(f"Parent frame content: {parent_text[:50]}...")
        browser_windows_page.log_step(f"–ö–æ–Ω—Ç–µ–Ω—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞: {parent_text}")

        assert "Parent" in parent_text, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Ñ—Ä–µ–π–º–µ"

    with allure.step("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–æ—á–µ—Ä–Ω–∏–π —Ñ—Ä–µ–π–º"):
        browser_windows_page.log_step("üë∂ –ü–µ—Ä–µ—Ö–æ–¥: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π -> –¥–æ—á–µ—Ä–Ω–∏–π —Ñ—Ä–µ–π–º")
        browser_windows_page.switch_to_child_frame()

        child_text = browser_windows_page.get_current_frame_content()
        navigation_log.append(f"Child frame content: {child_text[:50]}...")
        browser_windows_page.log_step(f"–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞: {child_text}")

        assert "Child" in child_text, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º —Ñ—Ä–µ–π–º–µ"

    with allure.step("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º"):
        browser_windows_page.log_step("‚¨ÜÔ∏è –ü–µ—Ä–µ—Ö–æ–¥: –¥–æ—á–µ—Ä–Ω–∏–π -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º")
        browser_windows_page.switch_to_parent_context()

        parent_text_return = browser_windows_page.get_current_frame_content()
        navigation_log.append(f"Back to parent: {parent_text_return[:50]}...")
        browser_windows_page.log_step(f"–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É: {parent_text_return}")

        assert "Parent" in parent_text_return, "–î–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º"

    with allure.step("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç"):
        browser_windows_page.log_step("üè† –ü–µ—Ä–µ—Ö–æ–¥: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π -> –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        browser_windows_page.switch_to_default_content()

        main_visible_return = browser_windows_page.is_main_content_visible()
        navigation_log.append(f"Back to main: {main_visible_return}")
        browser_windows_page.log_step(
            f"–í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É: {main_visible_return}"
        )

        assert main_visible_return, "–î–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç"

    with allure.step("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"):
        allure.attach(
            "\n".join(navigation_log), "navigation_log", allure.attachment_type.TEXT
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        expected_steps = 5
        actual_steps = len(navigation_log)
        browser_windows_page.log_step(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤: {actual_steps}")

        assert (
            actual_steps >= expected_steps
        ), f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–Ω–∏–º—É–º {expected_steps} —à–∞–≥–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {actual_steps}"


@allure.epic("Alerts, Frame & Windows")
@allure.feature("Nested Frames")
@allure.story("Frame Context Isolation")
@pytest.mark.alerts
def test_nested_frames_context_isolation(browser_windows_page: BrowserWindowsPage):
    """
    –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–µ–π–º–∞–º–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ—Ä–µ–π–º–∞.
    """
    isolation_results = {}

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"):
        browser_windows_page.log_step(
            "üß™ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏: –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ—Ä–µ–π–º–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )

        parent_accessible = browser_windows_page.can_access_parent_frame_elements()
        child_accessible = browser_windows_page.can_access_child_frame_elements()

        isolation_results["from_main"] = {
            "parent_accessible": parent_accessible,
            "child_accessible": child_accessible,
        }

        browser_windows_page.log_step(
            f"–ò–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π: {parent_accessible}, –¥–æ—á–µ—Ä–Ω–∏–π: {child_accessible}"
        )

        assert (
            not parent_accessible
        ), "–≠–ª–µ–º–µ–Ω—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        assert (
            not child_accessible
        ), "–≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞"):
        browser_windows_page.switch_to_parent_frame()
        browser_windows_page.log_step(
            "üß™ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏: –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞"
        )

        main_accessible = browser_windows_page.can_access_main_content_elements()
        child_accessible_from_parent = (
            browser_windows_page.can_access_child_frame_elements()
        )

        isolation_results["from_parent"] = {
            "main_accessible": main_accessible,
            "child_accessible": child_accessible_from_parent,
        }

        browser_windows_page.log_step(
            f"–ò–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π: {main_accessible}, –¥–æ—á–µ—Ä–Ω–∏–π: {child_accessible_from_parent}"
        )

        assert (
            not main_accessible
        ), "–≠–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞"
        # –î–æ—á–µ—Ä–Ω–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞"):
        browser_windows_page.switch_to_child_frame()
        browser_windows_page.log_step(
            "üß™ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏: –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞"
        )

        main_accessible_from_child = (
            browser_windows_page.can_access_main_content_elements()
        )
        parent_accessible_from_child = (
            browser_windows_page.can_access_parent_frame_elements()
        )

        isolation_results["from_child"] = {
            "main_accessible": main_accessible_from_child,
            "parent_accessible": parent_accessible_from_child,
        }

        browser_windows_page.log_step(
            f"–ò–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π: {main_accessible_from_child}, —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π: {parent_accessible_from_child}"
        )

        assert (
            not main_accessible_from_child
        ), "–≠–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ —Ñ—Ä–µ–π–º–∞"
        assert (
            not parent_accessible_from_child
        ), "–≠–ª–µ–º–µ–Ω—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–æ—á–µ—Ä–Ω–µ–≥–æ"

    with allure.step("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏"):
        browser_windows_page.switch_to_default_content()

        allure.attach(
            str(isolation_results),
            "frame_isolation_results",
            allure.attachment_type.JSON,
        )
        browser_windows_page.log_step(f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
