"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Text Box.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import pytest
import allure
from data import TestData


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Form Submission")
@pytest.mark.elements
@pytest.mark.smoke
def test_fill_all_fields_and_submit(text_box_page):
    """
    –¢–µ—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    –®–∞–≥–∏:
    1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
    """
    user_data = TestData.USERS["valid_user"]

    test_data = {
        "name": f"{user_data['first_name']} {user_data['last_name']}",
        "email": user_data["email"],
        "current_address": "123 Test Street, Test City, TC 12345",
        "permanent_address": "456 Permanent Avenue, Permanent City, PC 67890",
    }

    with allure.step("–ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ñ–æ—Ä–º—ã"):
        text_box_page.fill_all_fields(
            name=test_data["name"],
            email=test_data["email"],
            current_addr=test_data["current_address"],
            permanent_addr=test_data["permanent_address"],
        )

        allure.attach(str(test_data), "filled_form_data")

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É"):
        text_box_page.submit()

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"):
        output_data = text_box_page.get_all_output_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        assert (
            test_data["name"] in output_data["name"]
        ), f"–ò–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['name']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['name']}'"

        assert (
            test_data["email"] in output_data["email"]
        ), f"Email –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['email']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['email']}'"

        assert (
            test_data["current_address"] in output_data["current_address"]
        ), f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['current_address']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['current_address']}'"

        assert (
            test_data["permanent_address"] in output_data["permanent_address"]
        ), f"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['permanent_address']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['permanent_address']}'"

        allure.attach(str(output_data), "form_output_data")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Field Validation")
@pytest.mark.elements
def test_empty_form_submission(text_box_page):
    """
    –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö.
    """
    with allure.step("–û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"):
        text_box_page.clear_all_fields()

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º–µ"):
        is_output_visible = text_box_page.is_output_visible()

        if is_output_visible:
            output_data = text_box_page.get_all_output_data()
            # –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–Ω–∞, –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫–∏
            empty_values = [v for v in output_data.values() if v and v.strip()]

            allure.attach(str(output_data), "empty_form_output")
            allure.attach(f"Output visible: {is_output_visible}", "output_visibility")
        else:
            allure.attach("Output area is hidden", "output_state")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Email Validation")
@pytest.mark.elements
@pytest.mark.parametrize(
    "email,description,should_work",
    [
        ("test@example.com", "Standard email", True),
        ("user.name+tag@example.co.uk", "Complex valid email", True),
        ("test123@domain-name.info", "Email with numbers and hyphens", True),
        ("invalid-email", "Missing @ symbol", False),
        ("test@", "Missing domain", False),
        ("@example.com", "Missing username", False),
        ("test..email@example.com", "Double dots", False),
        ("", "Empty email", True),  # Empty field may be allowed
    ],
)
def test_email_field_validation(text_box_page, email, description, should_work):
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –ø–æ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã email –∞–¥—Ä–µ—Å–æ–≤.
    """
    with allure.step(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º email: {email} ({description})"):
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        text_box_page.fill_user_name("Test User")
        text_box_page.fill_user_email(email)
        text_box_page.fill_current_address("Test Address")

        allure.attach(email, "tested_email")
        allure.attach(description, "email_description")

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
        output_data = text_box_page.get_all_output_data()
        output_email = output_data.get("email", "")

        if should_work and email:
            # –î–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö email –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            assert (
                email in output_email
            ), f"–í–∞–ª–∏–¥–Ω—ã–π email '{email}' –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –ü–æ–ª—É—á–µ–Ω–æ: '{output_email}'"

            allure.attach("‚úì Email validated successfully", "validation_result")
        else:
            # –î–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö email –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            validation_result = f"Email: '{email}' | Output: '{output_email}' | Expected to work: {should_work}"
            allure.attach(validation_result, "validation_analysis")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Field Limits")
@pytest.mark.elements
@pytest.mark.parametrize(
    "text_length,description",
    [
        (100, "Short text (100 chars)"),
        (500, "Medium text (500 chars)"),
        (1000, "Long text (1000 chars)"),
        (2000, "Very long text (2000 chars)"),
    ],
)
def test_text_length_handling(text_box_page, text_length, description):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã –≤ –ø–æ–ª—è—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã —Ç–µ–∫—Å—Ç–∞.
    """
    test_text = "A" * text_length

    with allure.step(f"–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–º ({description})"):
        text_box_page.fill_user_name(f"User_{text_length}")
        text_box_page.fill_current_address(test_text)
        text_box_page.fill_permanent_address(test_text)

        allure.attach(f"Length: {text_length}", "text_length")
        allure.attach(
            test_text[:100] + "..." if len(test_text) > 100 else test_text,
            "text_sample",
        )

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"):
        output_data = text_box_page.get_all_output_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω)
        assert (
            len(output_data["current_address"]) > 0
        ), "Current address –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        assert (
            len(output_data["permanent_address"]) > 0
        ), "Permanent address –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—ã
        current_len = len(output_data["current_address"])
        permanent_len = len(output_data["permanent_address"])

        length_analysis = {
            "input_length": text_length,
            "current_output_length": current_len,
            "permanent_output_length": permanent_len,
            "truncated": current_len < text_length or permanent_len < text_length,
        }

        allure.attach(str(length_analysis), "length_analysis")
        allure.attach(
            (
                output_data["current_address"][:200] + "..."
                if len(output_data["current_address"]) > 200
                else output_data["current_address"]
            ),
            "output_sample",
        )


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Special Characters")
@pytest.mark.elements
@pytest.mark.parametrize(
    "special_text,description",
    [
        ("Hello <script>alert('test')</script>", "HTML/JavaScript injection"),
        ("Text with 'quotes' and \"double quotes\"", "Various quote types"),
        ("Special chars: @#$%^&*()+=[]{}|;:,.<>?", "Symbol characters"),
        ("Unicode: √±√°√©√≠√≥√∫ ‰∏≠Êñá üéâ", "Unicode and emojis"),
        ("Newlines\nand\ttabs", "Escape sequences"),
    ],
)
def test_special_characters_handling(text_box_page, special_text, description):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    with allure.step(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {description}"):
        text_box_page.fill_user_name("Special Test User")
        text_box_page.fill_user_email("test@example.com")
        text_box_page.fill_current_address(special_text)

        allure.attach(special_text, "input_special_text")
        allure.attach(description, "test_description")

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"):
        output_data = text_box_page.get_all_output_data()
        output_address = output_data.get("current_address", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∫–∞–∫ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–∏–ø—Ç—ã)
        page_title = text_box_page.page.title()
        assert "alert" not in page_title.lower(), "–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–∞–∫–æ–º-—Ç–æ –≤–∏–¥–µ
        assert len(output_address) > 0, "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"

        security_check = {
            "input_contains_script": "<script>" in special_text,
            "output_contains_script": "<script>" in output_address,
            "page_title_unchanged": "Text Box" in page_title,
            "data_preserved": len(output_address) > 0,
        }

        allure.attach(str(security_check), "security_analysis")
        allure.attach(output_address, "processed_output")
