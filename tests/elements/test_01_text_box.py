"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Text Box.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""

import pytest
import allure
from data import TestData
from locators.elements.text_box_locators import TextBoxLocators


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Form Submission")
@pytest.mark.elements
@pytest.mark.smoke
def test_fill_all_fields_and_submit(text_box_page):
    """
    –¢–µ—Å—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

    –®–∞–≥–∏:
    1. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–≤–æ–¥–∞
    """
    user_data = TestData.USERS["valid_user"]

    test_data = {
        "name": f"{user_data['first_name']} {user_data['last_name']}",
        "email": user_data["email"],
        "current_address": "123 Test Street, Test City, TC 12345",
        "permanent_address": "456 Permanent Avenue, Permanent City, PC 67890",
    }

    with allure.step("–ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Ñ–æ—Ä–º—ã"):
        text_box_page.fill_all_fields(
            name=test_data["name"],
            email=test_data["email"],
            current_addr=test_data["current_address"],
            permanent_addr=test_data["permanent_address"],
        )

        allure.attach(str(test_data), "filled_form_data")

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É"):
        text_box_page.submit()

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_appeared = text_box_page.wait_for_output(timeout=5000)
        text_box_page.log_step(f"–û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å: {output_appeared}")

        if not output_appeared:
            text_box_page.page.wait_for_timeout(1000)  # Fallback timeout

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"):
        output_data = text_box_page.get_all_output_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        assert (
            test_data["name"] in output_data["name"]
        ), f"–ò–º—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['name']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['name']}'"

        assert (
            test_data["email"] in output_data["email"]
        ), f"Email –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['email']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['email']}'"

        assert (
            test_data["current_address"] in output_data["current_address"]
        ), f"–¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['current_address']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['current_address']}'"

        assert (
            test_data["permanent_address"] in output_data["permanent_address"]
        ), f"–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: '{test_data['permanent_address']}', –ø–æ–ª—É—á–µ–Ω–æ: '{output_data['permanent_address']}'"

        allure.attach(str(output_data), "form_output_data")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Field Validation")
@pytest.mark.elements
def test_empty_form_submission(text_box_page):
    """
    –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º—ã.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö.
    """
    with allure.step("–û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã"):
        text_box_page.clear_all_fields()

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–π —Ñ–æ—Ä–º–µ"):
        is_output_visible = text_box_page.is_output_visible()

        if is_output_visible:
            output_data = text_box_page.get_all_output_data()
            # –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–Ω–∞, –≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–∫–∏
            empty_values = [v for v in output_data.values() if v and v.strip()]

            allure.attach(str(output_data), "empty_form_output")
            allure.attach(f"Output visible: {is_output_visible}", "output_visibility")
        else:
            allure.attach("Output area is hidden", "output_state")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Email Validation")
@pytest.mark.elements
@pytest.mark.parametrize(
    "email,description,should_work",
    [
        ("test@example.com", "Standard email", True),
        ("user.name@example.co.uk", "Email with dot in username", True),
        ("test123@example.com", "Email with numbers", True),
        ("invalid-email", "Missing @ symbol", False),
        ("test@", "Missing domain", False),
        ("@example.com", "Missing username", False),
        ("test..email@example.com", "Double dots", False),
        ("", "Empty email", True),  # Empty field may be allowed
    ],
)
def test_email_field_validation(text_box_page, email, description, should_work):
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email –ø–æ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã email –∞–¥—Ä–µ—Å–æ–≤.
    """
    with allure.step(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º email: {email} ({description})"):
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        text_box_page.fill_user_name("Test User")
        text_box_page.fill_user_email(email)
        text_box_page.fill_current_address("Test Address")
        text_box_page.fill_permanent_address("Test Permanent Address")  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –ø–æ–ª–µ

        allure.attach(email, "tested_email")
        allure.attach(description, "email_description")

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        submit_button_enabled = text_box_page.is_submit_button_enabled()
        text_box_page.log_step(f"Submit button enabled before submit: {submit_button_enabled}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ email –ø–æ–ª—è
        email_field_value = text_box_page.page.locator(TextBoxLocators.USER_EMAIL).input_value()
        text_box_page.log_step(f"Email field value: '{email_field_value}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        submit_button_enabled = text_box_page.is_submit_button_enabled()
        text_box_page.log_step(f"Submit button enabled after filling: {submit_button_enabled}")

        text_box_page.submit()

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_appeared = text_box_page.wait_for_output(timeout=5000)
        text_box_page.log_step(f"–û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å: {output_appeared}")

        if not output_appeared:
            text_box_page.page.wait_for_timeout(1000)  # Fallback timeout

    with allure.step("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        submit_button_enabled = text_box_page.is_submit_button_enabled()
        text_box_page.log_step(f"Submit button enabled before submit: {submit_button_enabled}")

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = text_box_page.debug_page_content()
        allure.attach(str(debug_info), "debug_info", allure.attachment_type.JSON)

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
        text_box_page.log_step(f"DEBUG INFO: {debug_info}")

        output_data = text_box_page.get_all_output_data()
        output_email = output_data.get("email", "")

        # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –º—ã –Ω–∞—à–ª–∏
        text_box_page.log_step(f"Output data: {output_data}")
        text_box_page.log_step(f"Output email: '{output_email}'")
        text_box_page.log_step(f"Looking for email: '{email}'")

        if should_work and email:
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            if "domainname.info" in email:
                pytest.skip(f"Email '{email}' –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
            # –î–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö email –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
            # –ï—Å–ª–∏ output –ø—É—Å—Ç–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if not output_email:
                text_box_page.log_step("‚ö†Ô∏è Output email is empty - form may not have submitted correctly")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π email
                if "domain-name" in email:
                    text_box_page.log_step("üîç –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –≤ –¥–æ–º–µ–Ω–µ")
                    allure.attach("–í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–µ—Ñ–∏—Å–∞–º–∏ –≤ –¥–æ–º–µ–Ω–µ", "analysis")

                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
                    text_box_page.log_step("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é...")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    validation_errors = text_box_page.page.locator(".field-error, .error-message, [class*='error']").all()
                    if validation_errors:
                        text_box_page.log_step(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(validation_errors)}")
                        for error in validation_errors:
                            try:
                                text_box_page.log_step(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error.inner_text()}")
                            except:
                                pass
                    else:
                        text_box_page.log_step("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ –ø–æ–ª—è—Ö
                    email_field = text_box_page.page.locator(TextBoxLocators.USER_EMAIL)
                    field_classes = email_field.get_attribute("class") or ""
                    text_box_page.log_step(f"–ö–ª–∞—Å—Å—ã –ø–æ–ª—è email: {field_classes}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ aria-invalid –∞—Ç—Ä–∏–±—É—Ç
                    aria_invalid = email_field.get_attribute("aria-invalid")
                    text_box_page.log_step(f"aria-invalid –¥–ª—è email –ø–æ–ª—è: {aria_invalid}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    required = email_field.get_attribute("required")
                    pattern = email_field.get_attribute("pattern")
                    text_box_page.log_step(f"required: {required}, pattern: {pattern}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ title –∏–ª–∏ placeholder —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
                    placeholder = email_field.get_attribute("placeholder")
                    title = email_field.get_attribute("title")
                    text_box_page.log_step(f"placeholder: {placeholder}, title: {title}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ data-* –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    data_attrs = {}
                    try:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —á–µ—Ä–µ–∑ JavaScript
                        attrs_js = email_field.evaluate("""
                            (element) => {
                                const attrs = {};
                                for (let i = 0; i < element.attributes.length; i++) {
                                    const attr = element.attributes[i];
                                    if (attr.name.startsWith('data-')) {
                                        attrs[attr.name] = attr.value;
                                    }
                                }
                                return attrs;
                            }
                        """)
                        if attrs_js:
                            data_attrs = attrs_js
                            text_box_page.log_step(f"data-–∞—Ç—Ä–∏–±—É—Ç—ã: {data_attrs}")
                    except Exception as e:
                        text_box_page.log_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å data-–∞—Ç—Ä–∏–±—É—Ç—ã: {e}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∏–ø –ø–æ–ª—è –∏ –µ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é
                    input_type = email_field.get_attribute("type")
                    text_box_page.log_step(f"–¢–∏–ø –ø–æ–ª—è email: {input_type}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
                    validity = email_field.evaluate("el => el.validity")
                    text_box_page.log_step(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—è: {validity}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    validation_message = email_field.evaluate("el => el.validationMessage")
                    if validation_message:
                        text_box_page.log_step(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_message}")
                    else:
                        text_box_page.log_step("–°–æ–æ–±—â–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ—Ç")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ email –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º HTML5
                    is_valid = email_field.evaluate("el => el.checkValidity()")
                    text_box_page.log_step(f"HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è: {is_valid}")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π –≤ —Ü–µ–ª–æ–º
                    form_element = text_box_page.page.locator("form").first
                    if form_element.is_visible():
                        form_valid = form_element.evaluate("form => form.checkValidity()")
                        text_box_page.log_step(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–π —Ñ–æ—Ä–º—ã: {form_valid}")
                    else:
                        text_box_page.log_step("–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ JavaScript –æ—à–∏–±–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    js_errors = text_box_page.page.evaluate("""
                        () => {
                            const errors = [];
                            const originalError = console.error;
                            console.error = (...args) => {
                                errors.push(args.join(' '));
                                originalError.apply(console, args);
                            };
                            return errors;
                        }
                    """)
                    if js_errors:
                        text_box_page.log_step(f"JavaScript –æ—à–∏–±–∫–∏: {js_errors}")
                    else:
                        text_box_page.log_step("JavaScript –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            assert (
                email in output_email
            ), f"–í–∞–ª–∏–¥–Ω—ã–π email '{email}' –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. –ü–æ–ª—É—á–µ–Ω–æ: '{output_email}'"

            allure.attach("‚úì Email validated successfully", "validation_result")
        else:
            # –î–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö email –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            validation_result = f"Email: '{email}' | Output: '{output_email}' | Expected to work: {should_work}"
            allure.attach(validation_result, "validation_analysis")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Field Limits")
@pytest.mark.elements
@pytest.mark.parametrize(
    "text_length,description",
    [
        (100, "Short text (100 chars)"),
        (500, "Medium text (500 chars)"),
        (1000, "Long text (1000 chars)"),
        (2000, "Very long text (2000 chars)"),
    ],
)
def test_text_length_handling(text_box_page, text_length, description):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã –≤ –ø–æ–ª—è—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã —Ç–µ–∫—Å—Ç–∞.
    """
    test_text = "A" * text_length

    with allure.step(f"–ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—Å—Ç–æ–º ({description})"):
        text_box_page.fill_user_name(f"User_{text_length}")
        text_box_page.fill_current_address(test_text)
        text_box_page.fill_permanent_address(test_text)

        allure.attach(f"Length: {text_length}", "text_length")
        allure.attach(
            test_text[:100] + "..." if len(test_text) > 100 else test_text,
            "text_sample",
        )

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"):
        output_data = text_box_page.get_all_output_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω)
        assert (
            len(output_data["current_address"]) > 0
        ), "Current address –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"
        assert (
            len(output_data["permanent_address"]) > 0
        ), "Permanent address –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—ã
        current_len = len(output_data["current_address"])
        permanent_len = len(output_data["permanent_address"])

        length_analysis = {
            "input_length": text_length,
            "current_output_length": current_len,
            "permanent_output_length": permanent_len,
            "truncated": current_len < text_length or permanent_len < text_length,
        }

        allure.attach(str(length_analysis), "length_analysis")
        allure.attach(
            (
                output_data["current_address"][:200] + "..."
                if len(output_data["current_address"]) > 200
                else output_data["current_address"]
            ),
            "output_sample",
        )


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Special Characters")
@pytest.mark.elements
@pytest.mark.parametrize(
    "special_text,description",
    [
        ("Hello <script>alert('test')</script>", "HTML/JavaScript injection"),
        ("Text with 'quotes' and \"double quotes\"", "Various quote types"),
        ("Special chars: @#$%^&*()+=[]{}|;:,.<>?", "Symbol characters"),
        ("Unicode: √±√°√©√≠√≥√∫ ‰∏≠Êñá üéâ", "Unicode and emojis"),
        ("Newlines\nand\ttabs", "Escape sequences"),
    ],
)
def test_special_characters_handling(text_box_page, special_text, description):
    """
    –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    with allure.step(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {description}"):
        text_box_page.fill_user_name("Special Test User")
        text_box_page.fill_user_email("test@example.com")
        text_box_page.fill_current_address(special_text)

        allure.attach(special_text, "input_special_text")
        allure.attach(description, "test_description")

    with allure.step("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"):
        text_box_page.submit()
        text_box_page.page.wait_for_timeout(1000)

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"):
        output_data = text_box_page.get_all_output_data()
        output_address = output_data.get("current_address", "")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∫–∞–∫ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä–∏–ø—Ç—ã)
        page_title = text_box_page.page.title()
        assert "alert" not in page_title.lower(), "–°–∫—Ä–∏–ø—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–∞–∫–æ–º-—Ç–æ –≤–∏–¥–µ
        assert len(output_address) > 0, "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"

        security_check = {
            "input_contains_script": "<script>" in special_text,
            "output_contains_script": "<script>" in output_address,
            "page_title_unchanged": "Text Box" in page_title,
            "data_preserved": len(output_address) > 0,
        }

        allure.attach(str(security_check), "security_analysis")
        allure.attach(output_address, "processed_output")


@allure.epic("Elements")
@allure.feature("Text Box")
@allure.story("Email Debug")
@pytest.mark.elements
def test_debug_problematic_email(text_box_page):
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ email –∞–¥—Ä–µ—Å–∞ test123@domain-name.info.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã.
    """
    problematic_email = "test123@domain-name.info"

    with allure.step(f"–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ email: {problematic_email}"):
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        text_box_page.fill_user_name("Test User")
        text_box_page.fill_user_email(problematic_email)
        text_box_page.fill_current_address("Test Address")
        text_box_page.fill_permanent_address("Test Permanent Address")

        allure.attach(problematic_email, "problematic_email")

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        submit_button_enabled = text_box_page.is_submit_button_enabled()
        text_box_page.log_step(f"Submit button enabled: {submit_button_enabled}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ email –ø–æ–ª—è
        email_field_value = text_box_page.page.locator(TextBoxLocators.USER_EMAIL).input_value()
        text_box_page.log_step(f"Email field value: '{email_field_value}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML5 –≤–∞–ª–∏–¥–∞—Ü–∏—é email –ø–æ–ª—è
        email_validation = text_box_page.page.evaluate("""
            () => {
                const emailField = document.querySelector('#userEmail');
                return {
                    value: emailField.value,
                    validity: emailField.checkValidity(),
                    validationMessage: emailField.validationMessage,
                    willValidate: emailField.willValidate,
                    type: emailField.type,
                    required: emailField.required,
                    pattern: emailField.pattern,
                    className: emailField.className,
                    ariaInvalid: emailField.getAttribute('aria-invalid'),
                    customValidity: emailField.validity.customError
                };
            }
        """)
        text_box_page.log_step(f"Email field validation: {email_validation}")
        allure.attach(str(email_validation), "email_validation", allure.attachment_type.JSON)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Å–µ–π —Ñ–æ—Ä–º—ã
        form_validation = text_box_page.page.evaluate("""
            () => {
                const form = document.querySelector('#userForm');
                return {
                    formValidity: form ? form.checkValidity() : 'No form found',
                    submitButton: document.querySelector('#submit').disabled
                };
            }
        """)
        text_box_page.log_step(f"Form validation: {form_validation}")
        allure.attach(str(form_validation), "form_validation", allure.attachment_type.JSON)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_errors = text_box_page.page.locator(".field-error, .error-message, [class*='error']").all()
        if validation_errors:
            text_box_page.log_step(f"–ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(validation_errors)}")
            for error in validation_errors:
                try:
                    text_box_page.log_step(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error.inner_text()}")
                except:
                    pass
        else:
            text_box_page.log_step("–°–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    with allure.step("–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É"):
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
        text_box_page.submit()

        # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_appeared = text_box_page.wait_for_output(timeout=5000)
        text_box_page.log_step(f"–û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å: {output_appeared}")

        if not output_appeared:
            text_box_page.page.wait_for_timeout(2000)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

    with allure.step("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        debug_info = text_box_page.debug_page_content()
        allure.attach(str(debug_info), "debug_info", allure.attachment_type.JSON)
        text_box_page.log_step(f"DEBUG INFO: {debug_info}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ output
        output_data = text_box_page.get_all_output_data()
        output_email = output_data.get("email", "")
        text_box_page.log_step(f"Output data: {output_data}")
        text_box_page.log_step(f"Output email: '{output_email}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        dom_changes = text_box_page.page.evaluate("""
            () => {
                const output = document.querySelector('#output');
                const form = document.querySelector('#userForm');
                return {
                    output_exists: !!output,
                    output_visible: output ? output.offsetParent !== null : false,
                    output_text: output ? output.textContent : '',
                    form_exists: !!form,
                    submit_button_disabled: document.querySelector('#submit').disabled
                };
            }
        """)
        text_box_page.log_step(f"DOM state after submit: {dom_changes}")
        allure.attach(str(dom_changes), "dom_state", allure.attachment_type.JSON)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ JavaScript –æ—à–∏–±–∫–∏
        js_errors = text_box_page.page.evaluate("""
            () => {
                const errors = [];
                window.addEventListener('error', (e) => errors.push(e.message));
                return errors;
            }
        """)
        if js_errors:
            text_box_page.log_step(f"JavaScript –æ—à–∏–±–∫–∏: {js_errors}")
            allure.attach(str(js_errors), "js_errors", allure.attachment_type.JSON)
        else:
            text_box_page.log_step("JavaScript –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    with allure.step("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
        assert email_validation["validity"], f"Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ HTML5 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º. Validation: {email_validation}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π
        assert form_validation["formValidity"], f"–§–æ—Ä–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π. Form validation: {form_validation}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞
        assert submit_button_enabled, "–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ output –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å email
        assert problematic_email in output_email, f"Email '{problematic_email}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤—ã–≤–æ–¥–µ. –ü–æ–ª—É—á–µ–Ω–æ: '{output_email}'"

        allure.attach("‚úì –ü—Ä–æ–±–ª–µ–º–Ω—ã–π email —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", "final_result")

        allure.attach("‚úì –ü—Ä–æ–±–ª–µ–º–Ω—ã–π email —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", "final_result")

