"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.
–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–ª—É—á—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
"""

import os
import subprocess
import argparse
import sys
from pathlib import Path


class TestRunner:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""

    def __init__(self):
        self.project_root = Path(__file__).parent
        self.allure_results = self.project_root / "allure-results"
        self.allure_report = self.project_root / "allure-report"

    @staticmethod
    def run_command(command: str, capture_output: bool = False) -> tuple[int, str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –≤—ã–≤–æ–¥."""
        print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {command}")
        try:
            if capture_output:
                result = subprocess.run(
                    command, shell=True, capture_output=True, text=True
                )
                return result.returncode, result.stdout
            else:
                result = subprocess.run(command, shell=True, check=False)
                return result.returncode, ""
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return 1, str(e)

    def run_tests(
        self,
        marker: str = None,
        parallel: bool = False,
        verbose: bool = True,
        html_report: bool = False,
    ):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        base_command = ["python", "-m", "pytest", "--alluredir=allure-results"]

        if verbose:
            base_command.append("-v")

        if marker:
            base_command.extend(["-m", marker])

        if parallel:
            base_command.extend(["-n", "auto"])

        if html_report:
            base_command.extend(["--html=pytest-report.html", "--self-contained-html"])

        command = " ".join(base_command)
        return self.run_command(command)[0]

    def run_specific_tests(self, test_path: str, verbose: bool = True):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ –ø—É—Ç–∏."""
        command = f"python -m pytest {test_path} --alluredir=allure-results"
        if verbose:
            command += " -v"
        return self.run_command(command)[0]

    @staticmethod
    def clean_all():
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤."""
        print("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")

        # –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        paths_to_clean = [
            "allure-results",
            "allure-report",
            ".pytest_cache",
            "htmlcov",
            "pytest-report.html",
            ".coverage",
        ]

        for path_str in paths_to_clean:
            path = Path(path_str)
            if path.is_dir():
                import shutil

                shutil.rmtree(path, ignore_errors=True)
                print(f"  ‚úì –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {path}")
            elif path.is_file():
                path.unlink(missing_ok=True)
                print(f"  ‚úì –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}")

        # –£–¥–∞–ª—è–µ–º __pycache__ –∏ .pyc —Ñ–∞–π–ª—ã
        for root, dirs, files in os.walk("."):
            for dir_name in dirs[:]:
                if dir_name == "__pycache__":
                    import shutil

                    cache_path = Path(root) / dir_name
                    shutil.rmtree(cache_path, ignore_errors=True)
                    dirs.remove(dir_name)

            for file_name in files:
                if file_name.endswith(".pyc"):
                    pyc_path = Path(root) / file_name
                    pyc_path.unlink(missing_ok=True)

        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return 0


def main():
    parser = argparse.ArgumentParser(
        description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤ —Å Allure –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"
    )

    parser.add_argument(
        "action",
        choices=[
            "test",
            "smoke",
            "regression",
            "elements",
            "alerts",
            "widgets",
            "forms",
            "interactions",
            "parallel",
            "clean",
            "allure-serve",
            "allure-generate",
            "install",
            "coverage",
            "lint",
        ],
        help="–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )

    parser.add_argument("--path", help="–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ—Å—Ç–∞–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞")

    parser.add_argument(
        "--no-verbose", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )

    parser.add_argument(
        "--html-report",
        action="store_true",
        help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å HTML –æ—Ç—á–µ—Ç pytest",
    )

    args = parser.parse_args()

    runner = TestRunner()
    verbose = not args.no_verbose

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if args.action == "clean":
        sys.exit(runner.clean_all())

    elif args.action == "install":
        commands = ["pip install -r requirements.txt", "playwright install"]
        for cmd in commands:
            result, _ = runner.run_command(cmd)
            if result != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {cmd}")
                sys.exit(result)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        sys.exit(0)

    elif args.action == "allure-serve":
        if not runner.allure_results.exists():
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.")
            sys.exit(1)
        result, _ = runner.run_command(f"allure serve {runner.allure_results}")
        sys.exit(result)

    elif args.action == "allure-generate":
        if not runner.allure_results.exists():
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.")
            sys.exit(1)
        command = (
            f"allure generate {runner.allure_results} -o {runner.allure_report} --clean"
        )
        result, _ = runner.run_command(command)
        if result == 0:
            print(f"‚úÖ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {runner.allure_report}")
        sys.exit(result)

    elif args.action == "coverage":
        result = runner.run_command(
            "python -m pytest --cov=pages --cov=locators --cov-report=html --cov-report=term --alluredir=allure-results"
        )[0]
        sys.exit(result)

    elif args.action == "lint":
        commands = [
            "flake8 pages tests locators --max-line-length=120",
            "mypy pages --ignore-missing-imports",
        ]
        for cmd in commands:
            result, _ = runner.run_command(cmd)
        sys.exit(0)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    if args.path:
        result = runner.run_specific_tests(args.path, verbose)
    else:
        # –ú–∞–ø–ø–∏–Ω–≥ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã
        action_map = {
            "test": (None, False),
            "smoke": ("smoke", False),
            "regression": ("regression", False),
            "elements": ("elements", False),
            "alerts": ("alerts", False),
            "widgets": ("widgets", False),
            "forms": ("forms", False),
            "interactions": ("interactions", False),
            "parallel": (None, True),
        }

        if args.action in action_map:
            marker, parallel = action_map[args.action]
            result = runner.run_tests(
                marker=marker,
                parallel=parallel,
                verbose=verbose,
                html_report=args.html_report,
            )
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {args.action}")
            sys.exit(1)

    sys.exit(result)


if __name__ == "__main__":
    main()
